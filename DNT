#!/usr/bin/env python3
# DNT -- Display Temperatures from neighborhood remote thermometers
# Modeled after
#   https://learn.sparkfun.com/tutorials/python-gui-guide-introduction-to-tkinter/experiment-3-sensor-dashboard
#
# HDTodd, Williston, VT, February, 2023; v2 April, 2023

import argparse, sys, os, signal
from paho.mqtt import client as mqtt_client
import tkinter as tk
import tkinter.font as tkFont
import random
import json
import time
import datetime

AP_DESCRIPTION="""
DNT:  Display the temperatures of neighborhood remote thermometer sensors
      as observed and published as MQTT by rtl_433.
"""

AP_EPILOG="""

"""

###############################################################################
##  *** BEGIN LOCAL MODIFICATIONS ***

# Known local sensors to be monitored
# Dictionary entries are "model+id":"Familiar Name".
# Run this program from a terminal session to see a list of models and ids 
# Just use "model+id" in place of familiar name if you haven't yet identified the sensors
location = {
    "Acurite-609TXC//51"       : "Outside",
    "Acurite-606TX//161"       : "Porch",
    "LaCrosse-TX141THBv2/0/168" : "Frank 168",
    "LaCrosse-TX141Bv3/1/253"   : "Not Frank 253",
    "Acurite-Tower/A/11524"    : "Acurite-Tower/A/11524",
    "Acurite-606TX//134"       : "Neighbor",
    "Oregon-THN132N//138"      : "Oregon-THN132N 138"
#    "Acurite-609TXC//164"     : "Emulator"
    }
# Display known remote sensors; size to allow for header row 
displaySize = len(location)+1

##  *** END LOCAL MODIFICATIONS ***

###############################################################################
# Global variable initialization

# MQTT connection management
# Parameters used to establish the mqtt connection to the rtl_433 receiver mqtt publisher
broker = None
topic = "rtl_433/+/events"
port = 1883
username = ""
password = ""
client_id = f'python-mqtt-{random.randint(0, 100)}'

# By default, use Fahrenheit scale for display
useF=True

# Remember if we are fullscreen or windowed; toggle starts fullscreen
fullscreen = False

# Set blank "lastEntry" key record fields for rejecting duplicate records
#   time+/-2sec with model & id the same count as a duplicate record
lastEntry = { "time":0.0, "model":"", "id":0 }
# Set 2-sec threshhold for rejecting duplicate records
thresh = 2.0

#########################################################################################
# CNTL-C handler
def handler(signum, frame):
    print()
    sys.exit(0)
 
###############################################################################
#  Create the command parser, parse cmd line,  and set defaults
def make_parser():
    
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=AP_DESCRIPTION,
                                     epilog=AP_EPILOG)

    parser.add_argument("-H", "--host", type=str, default=broker,
                        help="MQTT broker hostname to connect to (default: %(default)s)")
    parser.add_argument("-T", "--topic", type=str, default=topic,
                        help="rtl_433 MQTT event topic to subscribe to (default: %(default)s)")
    parser.add_argument("-U", "--username", type=str, default=username,
                        help="MQTT username, if needed; defaults to blank")
    parser.add_argument("-P", "--password", type=str, default=password,
                        help="MQTT password, if needed; defaults to blank")
    parser.add_argument("-p", "--port", type=int, default=port,
                        help="MQTT port (default: %(default)s)")
    parser.add_argument("-C", "--Celsius", dest="degC", action="store_true",
                        default=False)
    parser.add_argument("-F", "--Fahrenheit", dest="degF", action="store_true",
                        default=True)
    parser.add_argument("-d", "--debug", dest="debug", action="store_true")
    args = parser.parse_args()
    return args

###############################################################################
# Convert time from various formats to epoch time
def CnvTime(ts):
    if ts.find("-") > 0:
        try:
            eTime = datetime.datetime.fromisoformat(ts).timestamp()
        except ValueError as e:
            err={}
            print("datetime error in input line converting time string: ", ts)
            print("datetime  msg:", err.get("error", str(e)))
            sys.exit(1)
    else:
        try:
            eTime = float(ts)
        except ValueError as e:
            err = {}
            print("Datetime conversion failed on line with datetime string", ts)
            print("float() error msg:", err.get("error", str(e)))
            sys.exit(1)
    return eTime


###############################################################################
# Functions for displaying

# Toggle fullscreen
def toggle_fullscreen(event=None):
    global win
    global fullscreen

    fullscreen = not fullscreen
    win.attributes('-fullscreen', fullscreen)
    resize()

# Automatically resize font size based on window size
def resize(event=None):
    global dfont
    global lfont
    global frm

    # Resize font based on frame height (minimum size of 12)
    # Use negative number for "pixels" instead of "points"
    dfont.configure(size=-max(12, int((frm.winfo_height() / 12))))
    lfont.configure(size=-max(18, int((frm.winfo_height() / 9))))

    for j in range(3):
        lbl_data[0][j].configure(font=lfont)
        for i in range(1,displaySize-1):
            lbl_data[i][j].configure(font=dfont)

    btn_quit.config(font=dfont)
    btn_toggle.config(font=dfont)
    
###############################################################################
# MQTT functions and display updating
# Connect to  MQTT broker 
def connect_mqtt() -> mqtt_client:
    def on_connect(mqtt, userdata, flags, rc):
        if rc == 0:
            print("Connected to MQTT Broker!")
        else:
            print("Failed attempt to connect to ", mqtt)
            print("  with userdata ", userdata)
            print("Return code %d\n", rc)

    mqtt = mqtt_client.Client(client_id, clean_session=False)
    mqtt.username_pw_set(username, password)
    mqtt.on_connect = on_connect
    mqtt.connect(broker, port)
    subscribe(mqtt)
    return mqtt

# Subscribe to rtl_433 publication & process records we receive
def subscribe(mqtt: mqtt_client):

    # on_message does the real work
    # When we get a thermometer reading,
    #   ignore if it's a duplicate, update display if it isn't
    def on_message(mqtt, userdata, msg):
        global locs
        global temp
        global rh

        # parse the json payload
        y = json.loads(msg.payload.decode())

        # If not a device record, just return
        if not "model" in y:
            return

        #  Statements below make 'model'/'channel'/'id' the key for identifying
        dev = y["model"] + "/"
        if "channel" in y:
            dev += str(y["channel"])
        dev += "/"
        if "id" in y:
            dev += str(y["id"])

        # if this is a themometer reading, process it; otherwise just return
        if "temperature_C" in y.keys():
            ltemp = y["temperature_C"]
            if useF:
                ltemp = ltemp*9.0/5.0+32.0
        else:
            if "temperature_F" in y.keys():
                ltemp = y["temperature_F"]
                if not useF:
                    ltemp = (ltemp-32.0)*5.0/9.0
                else:
                    return   # if no temp reading in record, ignore it
            
        # OK, we have a temp reading. Set the variables we need
        # Get humidity if reading has it
        hum = 0 if not ("humidity" in y.keys()) else int(y["humidity"])
        # Is this a duplicate record?  Use time+model+id as a fingerprint to tell.
        # Get time in seconds since Epoch for comparison purposes, with 2 sec threshhold
        eTime = CnvTime(y["time"])

        # If not a duplicate entry, then process & record; else skip
        if eTime>lastEntry["time"]+thresh or dev!=lastEntry["dev"]:
            loc  = dev if not (dev in location) else location[dev]
            drow = -1 if not (dev in location) else list(location).index(dev)
            print("{:<3d} {:<30} {:<20} {:<30} {:>8.1f}{:2} {:>5}% snr={:>3.0f}".format(
                drow,
                loc,
                y["time"],
                dev,
                round(ltemp,1),
                tScale,
                hum,
                0.0 if not ('snr' in y) else y['snr'])
                )

            # Update labels to display temperature and humidity values
            if drow in range(displaySize):
                try:
                    locs[drow].set(loc)
                    temp[drow].set(round(ltemp,1))
                    rh[drow].set(hum)
                except:
                    print("exception when trying to set display values")
                    pass
            resize()
            # Now note this entry's fingerprint for subsequent de-duping
            lastEntry["time"] = eTime
            lastEntry["dev"] = dev
            return  #From on_message()
        
    mqtt.subscribe(topic)
    mqtt.on_message = on_message
    print("subscribed to mqtt feed")
    return #From subscribe()

def quit_prog(event=None):
    mqtt.loop_stop()
    mqtt.disconnect()
    win.quit()
        
###############################################################################
# Main script

signal.signal(signal.SIGINT, handler)

args = make_parser()

#  We need host and topic, so if not already provided by
#    cmdline, env, or embedded source code, then ask for them
if not args.host:
    if "MQTT_HOST" in os.environ:
        args.host = os.environ["MQTT_HOST"]
    else:
        if broker == None:
            args.host = input("MQTT host name or IP: ")

if not args.topic:
    if "MQTT_TOPIC" in os.environ:
        args.topic = os.environ["MQTT_TOPIC"]
    else:
        if topic == None:
            args.topic = input("MQTT topic: ")

#  username and password not required, so don't prompt if not already provided
#    and port just defaults
if not args.username and 'MQTT_USERNAME' in os.environ:
    args.username = os.environ['MQTT_USERNAME']
else:
    args.username = ""
    
if not args.password and 'MQTT_PASSWORD' in os.environ:
    args.password = os.environ['MQTT_PASSWORD']
else:
    args.password = ""

if not args.port and 'MQTT_PORT' in os.environ:
    args.port = os.environ['MQTT_PORT']

useF     = False if args.degC!=None and args.degC else True
broker   = args.host
topic    = args.topic
username = args.username
password = args.password
port     = args.port

print("Debug is ", "ON" if not args.debug==None and args.debug else "OFF")
if args.debug:
    print("Parameter settings in execution are ...")
    print("\tMQTT host:    ", broker)
    print("\tMQTT topic:   ", topic)
    print("\tMQTT username:", username)
    print("\tMQTT password:", password)
    print("\tMQTT port:    ", port)
    print("\tUseF:         ", useF)

tScale = "°F" if useF else "°C"

# Create the main window
win = tk.Tk()
win.title("Neighborhood Temperatures")

# Create dynamic font for text
dfont = tkFont.Font(size=-18)
lfont = tkFont.Font(size=-48, weight="bold")

# Create the main container
frm = tk.Frame(win)

# Variables for holding temperature and humidity data
locs = []
temp = []
rh = []
for i in range(len(location)):
    locs.append(tk.StringVar())
    temp.append(tk.DoubleVar())
    rh.append(tk.IntVar())

# Create widgets
lbl_data = []

# First, the header
lbl_data.append( (tk.Label(frm, text="Location",        font=lfont, fg='green'),
                  tk.Label(frm, text=("Temp "+tScale),  font=lfont, fg='green'),
                  tk.Label(frm, text="%RH",             font=lfont, fg='green')) )

# Now the table of readings
for i in range(len(location)):
    lbl_data.append( (tk.Label(frm, textvariable=locs[i], font=dfont),
                      tk.Label(frm, textvariable=temp[i], font=dfont),
                      tk.Label(frm, textvariable=rh[i],   font=dfont)) )

# Lay out widgets in a grid in the frame
for i in range(displaySize-1):
    lbl_data[i][0].grid(row=i, column=0, padx=5, pady=5, sticky=tk.W)
    lbl_data[i][1].grid(row=i, column=1, padx=5, pady=5, sticky=tk.E)
    lbl_data[i][2].grid(row=i, column=2, padx=5, pady=5, sticky=tk.E)

# Make the grid cells expand to fill frame
for i in range(displaySize):
    frm.rowconfigure(i, weight=1)
for j in range(3):
    frm.columnconfigure(j, weight=1)

frm.pack(fill=tk.BOTH, expand=1)

# And add the buttons at the bottom
btn_quit=tk.Button(win, text="Quit", width=6, height=2, font=dfont, fg='red', command=quit_prog)
btn_quit.pack(side=tk.LEFT)
btn_toggle=tk.Button(win, text="Toggle\nScreen", width=10, height=2, font=dfont, fg='blue', command=toggle_fullscreen)
btn_toggle.pack(side=tk.LEFT)

# Have <ESC> toggle window, and call resize() every time the window is resized
win.bind('<Escape>', toggle_fullscreen)
win.bind("<ButtonRelease-1>", resize)

for i in range(len(location)):
    locs[i].set(" ")
    temp[i].set(" ")
    rh[i].set(" ")
    
# connect to the mqtt broker and subscribe to the feed.
#   MQTT events cause the displayed values to be updated
mqtt = connect_mqtt()
mqtt.loop_start()

print("entering run loop")
win.mainloop()
